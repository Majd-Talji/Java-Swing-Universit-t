/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.majdtalji.universitaet.verwaltung;

import com.majdtalji.universitaet.db.ConnectionDataBase;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import universitaet.MainMenu;

/**
 *
 * @author Majd
 */
public class Doctor extends javax.swing.JFrame {

    /**
     * Creates new form Doctor
     */
    Connection con = null;
    PreparedStatement com = null;
    ResultSet rst = null;
    String doctorOldName;

    public Doctor() {
        initComponents();

        if (MainMenu.ch == 2) {
            this.setTitle("Doctor bearbeiten");
            addUndDeleteUndUpdate.setIcon(new ImageIcon(getClass().getResource("/image/222.png")));
            name.setEnabled(false);
            mobile.setEnabled(false);
            address.setEnabled(false);
            male.setEnabled(false);
            fmale.setEnabled(false);
        } else if (MainMenu.ch == 3) {
            this.setTitle("Doctor löschen");
            addUndDeleteUndUpdate.setIcon(new ImageIcon(getClass().getResource("/image/333.png")));
            name.setEnabled(false);
            mobile.setEnabled(false);
            address.setEnabled(false);
            male.setEnabled(false);
            fmale.setEnabled(false);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        idLabel = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        male = new javax.swing.JRadioButton();
        fmale = new javax.swing.JRadioButton();
        addUndDeleteUndUpdate = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        mobileLabel = new javax.swing.JLabel();
        mobile = new javax.swing.JTextField();
        address = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        geschlechtLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Doctor hinzufügen");
        setIconImage(new ImageIcon(getClass().getResource("/image/icon-hochschule.png")).getImage());
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        idLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        idLabel.setForeground(new java.awt.Color(0, 255, 102));
        idLabel.setText("ID Nummer");

        id.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                idKeyPressed(evt);
            }
        });

        buttonGroup1.add(male);
        male.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        male.setForeground(new java.awt.Color(0, 0, 102));
        male.setText("Männlich");

        buttonGroup1.add(fmale);
        fmale.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fmale.setForeground(new java.awt.Color(0, 0, 102));
        fmale.setText("Weiblich");

        addUndDeleteUndUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/111.png"))); // NOI18N
        addUndDeleteUndUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUndDeleteUndUpdateActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/555.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        nameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(0, 255, 102));
        nameLabel.setText("Doctor Name");

        name.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        mobileLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        mobileLabel.setForeground(new java.awt.Color(0, 255, 102));
        mobileLabel.setText("Handynummer");

        mobile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        address.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        addressLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addressLabel.setForeground(new java.awt.Color(0, 255, 102));
        addressLabel.setText("Adresse");

        geschlechtLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        geschlechtLabel.setForeground(new java.awt.Color(0, 255, 102));
        geschlechtLabel.setText("Geschlecht");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(mobileLabel)
                .addGap(18, 18, 18)
                .addComponent(mobile, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addressLabel)
                            .addComponent(geschlechtLabel))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(male)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fmale))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idLabel)
                            .addComponent(nameLabel))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(addUndDeleteUndUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(75, 75, 75))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLabel)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mobileLabel)
                    .addComponent(mobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLabel)
                    .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(male)
                        .addComponent(fmale))
                    .addComponent(geschlechtLabel))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addUndDeleteUndUpdate)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(379, 346));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addUndDeleteUndUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUndDeleteUndUpdateActionPerformed

        switch (MainMenu.ch) {
            case 1:
                insert();
                break;
            case 2:
                update();
                break;
            case 3:
                delete();
                break;
        }

    }//GEN-LAST:event_addUndDeleteUndUpdateActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void idKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idKeyPressed

        if (evt.getKeyCode() == evt.VK_ENTER) {

            if (id.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Das feld für die Doctornummer ist leer.", "Ein leers Feld", 2);
            } else {

                try {
//                    //  id_doctor + name_doctor + password+mobile+address+gender
                    con = ConnectionDataBase.getConnection();
                    com = con.prepareStatement("SELECT * FROM doctor WHERE id_doctor = '" + Integer.parseInt(id.getText()) + "'");
                    rst = com.executeQuery();

                    if (rst.next()) {
                        if (MainMenu.ch == 2) {
                            id.setEnabled(false);
                            name.setEnabled(true);
                            mobile.setEnabled(true);
                            address.setEnabled(true);
                            male.setEnabled(true);
                            fmale.setEnabled(true);
                        }
                        name.setText(rst.getString("name_doctor"));
                        doctorOldName = rst.getString("name_doctor");

                        mobile.setText(rst.getString("mobile"));
                        address.setText(rst.getString("address"));

                        String gender = rst.getString("gender");
                        if (gender.equals(fmale.getText())) {
                            fmale.setSelected(true);
                        } else {
                            male.setSelected(true);
                        }

                    } else {
                        name.setText("");
                        mobile.setText("");
                        address.setText("");
                        buttonGroup1.clearSelection();
//                        first.setSelected(false);
//                        second.setSelected(false);
                        JOptionPane.showMessageDialog(null, "Die Doctornummer existiert nicht", "Existiert", 2);
                    }

                } catch (Exception e) {
                } finally {
                    try {
                        con.close();
                        rst.close();
                    } catch (Exception ex) {
                    }
                }

            }
        }

    }//GEN-LAST:event_idKeyPressed

    private void insert() {

        String miss = "Sie haben vergessen, die folgenden Daten einzugeben :\n";
        if (id.getText().equals("")) {
            miss += idLabel.getText() + "\n";
        }
        if (name.getText().equals("")) {
            miss += nameLabel.getText() + "\n";
        }
        if (mobile.getText().equals("")) {
            miss += mobileLabel.getText() + "\n";
        }
        if (address.getText().equals("")) {
            miss += addressLabel.getText() + "\n";
        }
        if (!(male.isSelected() || fmale.isSelected())) {
            miss += geschlechtLabel.getText() + "\n";
        }

        String gender = male.getText();
        if (fmale.isSelected()) {
            gender = fmale.getText();
        }
        if (!id.getText().equals("") && !name.getText().equals("") && !mobile.getText().equals("") && !address.getText().equals("") && (male.isSelected() || fmale.isSelected())) {
////        	id_doctor+name_doctor+password+mobile+address+gender
            try {
                con = ConnectionDataBase.getConnection();
                com = con.prepareStatement("SELECT * FROM doctor WHERE id_doctor = '" + Integer.parseInt(id.getText()) + "'");
                rst = com.executeQuery();

                if (rst.next()) {
                    JOptionPane.showMessageDialog(null, "Die Doctornummer existiert bereits", "Existiert", 2);
                } else {

                    try {
                        com = con.prepareStatement("INSERT INTO doctor(id_doctor, name_doctor, password, mobile, address, gender) "
                                + "VALUES ('" + Integer.parseInt(id.getText()) + "','" + name.getText() + "','123456','" + mobile.getText() + "','" + address.getText() + "','" + gender + "')");
                        boolean bool = com.execute();

                        JOptionPane.showMessageDialog(null, "Doctor erfolgreich hinzugefügt", "Hinzugefügt", JOptionPane.INFORMATION_MESSAGE);
                        clear();
                    } catch (Exception e) {
                    } finally {
                        try {
                            con.close();
                        } catch (Exception ex) {
                        }
                    }

                }

            } catch (Exception e) {
            } finally {
                try {
                    con.close();
                    rst.close();
                } catch (Exception ex) {
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, miss, "Datenverlust", 2);
        }

    }

    private void clear() {

        id.setText("");
        name.setText("");
        mobile.setText("");
        address.setText("");
        buttonGroup1.clearSelection();
//        male.setSelected(false);
//        fmale.setSelected(false);

    }

    private void update() {

        String miss = "Sie haben vergessen, die folgenden Daten einzugeben :\n";
        if (name.getText().equals("")) {
            miss += nameLabel.getText() + "\n";
        }
        if (mobile.getText().equals("")) {
            miss += mobileLabel.getText() + "\n";
        }
        if (address.getText().equals("")) {
            miss += addressLabel.getText() + "\n";
        }
        if (!(male.isSelected() || fmale.isSelected())) {
            miss += geschlechtLabel.getText() + "\n";
        }

        String gender = male.getText();
        if (fmale.isSelected()) {
            gender = fmale.getText();
        }
        if (!name.getText().equals("") && !mobile.getText().equals("") && !address.getText().equals("") && (male.isSelected() || fmale.isSelected())) {

            try {
                //id_doctor+name_doctor+password+mobile+address+gender
                con = ConnectionDataBase.getConnection();
                if (!name.getText().equals(doctorOldName)) {
                    com = con.prepareStatement("UPDATE course SET name_doctor ='" + name.getText() + "' WHERE name_doctor ='" + doctorOldName + "'");
                    com.execute();

                    com = con.prepareStatement("UPDATE register_student_course SET name_doctor ='" + name.getText() + "' WHERE name_doctor ='" + doctorOldName + "'");
                    com.execute();
                }
                com = con.prepareStatement("UPDATE doctor SET name_doctor='" + name.getText() + "',mobile='" + mobile.getText() + "',address='" + address.getText() + "',gender='" + gender + "' WHERE id_doctor='" + id.getText() + "'");
                com.execute();

                JOptionPane.showMessageDialog(null, "Doctorendaten wurden erfolgreich geändert.", "Modifiziert", JOptionPane.INFORMATION_MESSAGE);
                clear();
                id.setEnabled(true);
                name.setEnabled(false);
                mobile.setEnabled(false);
                address.setEnabled(false);
                male.setEnabled(false);
                fmale.setEnabled(false);

            } catch (Exception e) {
            } finally {
                try {
                    con.close();
                } catch (Exception ex) {
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, miss, "Datenverlust", 2);
        }

    }

    private void delete() {

        String miss = "Sie haben vergessen, die folgenden Daten einzugeben :\n";
        if (id.getText().equals("")) {
            miss += idLabel.getText() + "\n";
        }
        if (!id.getText().equals("")) {

            try {
////                  id_doctor+name_doctor+password+mobile+address+gender
                con = ConnectionDataBase.getConnection();
                com = con.prepareStatement("SELECT * FROM doctor WHERE id_doctor = '" + Integer.parseInt(id.getText()) + "'");
                rst = com.executeQuery();

                if (rst.next()) {
                    String doctorName = rst.getString("name_doctor");
                    com = con.prepareStatement("UPDATE course SET name_doctor ='' WHERE name_doctor ='" + doctorName + "'");
                    com.execute();

                    com = con.prepareStatement("DELETE FROM doctor WHERE id_doctor = '" + Integer.parseInt(id.getText()) + "'");
                    com.execute();

                    JOptionPane.showMessageDialog(null, "Doctor erfolgreich gelöscht.", "Gelöscht", JOptionPane.INFORMATION_MESSAGE);
                    clear();
                    id.setEnabled(true);
                    name.setEnabled(false);
                    mobile.setEnabled(false);
                    address.setEnabled(false);
                    male.setEnabled(false);
                    fmale.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(null, "Die Doctornummer existiert bereits nicht", "Existiert nicht", 2);
                }

            } catch (Exception e) {
            } finally {
                try {
                    con.close();
                } catch (Exception ex) {
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, miss, "Datenverlust", 2);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Doctor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addUndDeleteUndUpdate;
    private javax.swing.JTextField address;
    private javax.swing.JLabel addressLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton fmale;
    private javax.swing.JLabel geschlechtLabel;
    private javax.swing.JTextField id;
    private javax.swing.JLabel idLabel;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton male;
    private javax.swing.JTextField mobile;
    private javax.swing.JLabel mobileLabel;
    private javax.swing.JTextField name;
    private javax.swing.JLabel nameLabel;
    // End of variables declaration//GEN-END:variables
}
